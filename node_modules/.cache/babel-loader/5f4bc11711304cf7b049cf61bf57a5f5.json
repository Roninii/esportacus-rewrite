{"ast":null,"code":"import _regeneratorRuntime from \"/home/ronini/esportacus-rewrite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ronini/esportacus-rewrite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var esportacus = {\n  sec: \"?token=rzHaDh7xA20vAeJw57j7-VK4Jq5BwrLMKlhQ5z79ouEE15DuhU8\",\n  path: \"https://api.pandascore.co\",\n  corsAnywhere: \"https://cors-anywhere.herokuapp.com/\",\n  _games: [{\n    name: 'League of Legends',\n    slug: 'lol'\n  }, {\n    name: 'Overwatch',\n    slug: 'ow'\n  }, {\n    name: 'Dota 2',\n    slug: 'dota2'\n  }, {\n    name: 'Counter-Strike: Global Offensive',\n    slug: 'cs:go'\n  }, {\n    name: \"PlayerUnknown's Battlegrounds\",\n    slug: 'pubg'\n  }],\n  sortList: function sortList(list) {\n    return list.sort(function (a, b) {\n      // higher in alphabet\n      if (a.name.toLowerCase() < b.name.toLowerCase()) return -1; // lower in alphabet\n\n      if (a.name.toLowerCase() > b.name.toLowerCase()) return 1; // names are equal\n\n      return 0;\n    });\n  },\n  games: function games() {\n    return this._games;\n  },\n  leagues: function () {\n    var _leagues = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var res, leagues;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(this.corsAnywhere).concat(this.path, \"/leagues\").concat(this.sec));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              leagues = _context.sent;\n              return _context.abrupt(\"return\", leagues);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function leagues() {\n      return _leagues.apply(this, arguments);\n    }\n\n    return leagues;\n  }(),\n  teams: function () {\n    var _teams = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var res, teams, sortedTeams;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"\".concat(this.corsAnywhere).concat(this.path, \"/teams\").concat(this.sec));\n\n            case 2:\n              res = _context2.sent;\n              _context2.next = 5;\n              return res.json();\n\n            case 5:\n              teams = _context2.sent;\n              _context2.next = 8;\n              return this.sortList(teams);\n\n            case 8:\n              sortedTeams = _context2.sent;\n              return _context2.abrupt(\"return\", sortedTeams);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function teams() {\n      return _teams.apply(this, arguments);\n    }\n\n    return teams;\n  }(),\n  players: function () {\n    var _players = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var res, players, sortedPlayers;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"\".concat(this.corsAnywhere).concat(this.path, \"/players\").concat(this.sec));\n\n            case 2:\n              res = _context3.sent;\n              _context3.next = 5;\n              return res.json();\n\n            case 5:\n              players = _context3.sent;\n              _context3.next = 8;\n              return this.sortList(players);\n\n            case 8:\n              sortedPlayers = _context3.sent;\n              return _context3.abrupt(\"return\", sortedPlayers);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function players() {\n      return _players.apply(this, arguments);\n    }\n\n    return players;\n  }()\n};","map":{"version":3,"sources":["/home/ronini/esportacus-rewrite/src/utils/api.js"],"names":["esportacus","sec","path","corsAnywhere","_games","name","slug","sortList","list","sort","a","b","toLowerCase","games","leagues","fetch","res","json","teams","sortedTeams","players","sortedPlayers"],"mappings":";;AAAA,OAAO,IAAMA,UAAU,GAAG;AACxBC,EAAAA,GAAG,8DADqB;AAExBC,EAAAA,IAAI,6BAFoB;AAGxBC,EAAAA,YAAY,wCAHY;AAIxBC,EAAAA,MAAM,EAAE,CACN;AAAEC,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GADM,EAEN;AAAED,IAAAA,IAAI,EAAE,WAAR;AAAqBC,IAAAA,IAAI,EAAE;AAA3B,GAFM,EAGN;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAHM,EAIN;AAAED,IAAAA,IAAI,EAAE,kCAAR;AAA4CC,IAAAA,IAAI,EAAE;AAAlD,GAJM,EAKN;AAAED,IAAAA,IAAI,iCAAN;AAAyCC,IAAAA,IAAI,EAAE;AAA/C,GALM,CAJgB;AAWxBC,EAAAA,QAXwB,oBAWfC,IAXe,EAWT;AACb,WAAOA,IAAI,CAACC,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACzB;AACA,UAAID,CAAC,CAACL,IAAF,CAAOO,WAAP,KAAuBD,CAAC,CAACN,IAAF,CAAOO,WAAP,EAA3B,EAAiD,OAAO,CAAC,CAAR,CAFxB,CAGzB;;AACA,UAAIF,CAAC,CAACL,IAAF,CAAOO,WAAP,KAAuBD,CAAC,CAACN,IAAF,CAAOO,WAAP,EAA3B,EAAiD,OAAO,CAAP,CAJxB,CAMzB;;AACA,aAAO,CAAP;AACD,KARM,CAAP;AASD,GArBuB;AAuBxBC,EAAAA,KAvBwB,mBAuBhB;AACN,WAAO,KAAKT,MAAZ;AACD,GAzBuB;AA2BlBU,EAAAA,OA3BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA4BJC,KAAK,WAAI,KAAKZ,YAAT,SAAwB,KAAKD,IAA7B,qBAA4C,KAAKD,GAAjD,EA5BD;;AAAA;AA4BhBe,cAAAA,GA5BgB;AAAA;AAAA,qBA6BAA,GAAG,CAACC,IAAJ,EA7BA;;AAAA;AA6BhBH,cAAAA,OA7BgB;AAAA,+CA+BfA,OA/Be;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkClBI,EAAAA,KAlCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAmCJH,KAAK,WAAI,KAAKZ,YAAT,SAAwB,KAAKD,IAA7B,mBAA0C,KAAKD,GAA/C,EAnCD;;AAAA;AAmChBe,cAAAA,GAnCgB;AAAA;AAAA,qBAoCFA,GAAG,CAACC,IAAJ,EApCE;;AAAA;AAoChBC,cAAAA,KApCgB;AAAA;AAAA,qBAqCI,KAAKX,QAAL,CAAcW,KAAd,CArCJ;;AAAA;AAqChBC,cAAAA,WArCgB;AAAA,gDAuCfA,WAvCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0ClBC,EAAAA,OA1CkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA2CJL,KAAK,WAAI,KAAKZ,YAAT,SAAwB,KAAKD,IAA7B,qBAA4C,KAAKD,GAAjD,EA3CD;;AAAA;AA2ChBe,cAAAA,GA3CgB;AAAA;AAAA,qBA4CAA,GAAG,CAACC,IAAJ,EA5CA;;AAAA;AA4ChBG,cAAAA,OA5CgB;AAAA;AAAA,qBA6CM,KAAKb,QAAL,CAAca,OAAd,CA7CN;;AAAA;AA6ChBC,cAAAA,aA7CgB;AAAA,gDA+CfA,aA/Ce;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["export const esportacus = {\n  sec: `?token=rzHaDh7xA20vAeJw57j7-VK4Jq5BwrLMKlhQ5z79ouEE15DuhU8`,\n  path: `https://api.pandascore.co`,\n  corsAnywhere: `https://cors-anywhere.herokuapp.com/`,\n  _games: [\n    { name: 'League of Legends', slug: 'lol' },\n    { name: 'Overwatch', slug: 'ow' },\n    { name: 'Dota 2', slug: 'dota2' },\n    { name: 'Counter-Strike: Global Offensive', slug: 'cs:go' },\n    { name: `PlayerUnknown's Battlegrounds`, slug: 'pubg' },\n  ],\n  sortList(list) {\n    return list.sort((a, b) => {\n      // higher in alphabet\n      if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;\n      // lower in alphabet\n      if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;\n\n      // names are equal\n      return 0;\n    });\n  },\n\n  games() {\n    return this._games;\n  },\n\n  async leagues() {\n    const res = await fetch(`${this.corsAnywhere}${this.path}/leagues${this.sec}`);\n    const leagues = await res.json();\n\n    return leagues;\n  },\n\n  async teams() {\n    const res = await fetch(`${this.corsAnywhere}${this.path}/teams${this.sec}`);\n    const teams = await res.json();\n    const sortedTeams = await this.sortList(teams);\n\n    return sortedTeams;\n  },\n\n  async players() {\n    const res = await fetch(`${this.corsAnywhere}${this.path}/players${this.sec}`);\n    const players = await res.json();\n    const sortedPlayers = await this.sortList(players);\n\n    return sortedPlayers;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}